#!/bin/bash

# Exit script if any command fails
set -e

# Show banner
echo "============================"
echo "  Kubernetes Setup Script"
echo "============================"

# Ask whether this node is master or worker
read -p "Is this the master node? (yes/no): " is_master

###########################################
# STEP 1: COMMON SETUP FOR ALL NODES
###########################################

echo "[STEP 1] Disabling swap (Kubernetes requires swap to be off)"
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

echo "[STEP 2] Loading required kernel modules"
sudo modprobe overlay
sudo modprobe br_netfilter

# Save modules to load on boot
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

echo "[STEP 3] Setting sysctl parameters for Kubernetes networking"
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf 
net.bridge.bridge-nf-call-iptables  = 1 
net.bridge.bridge-nf-call-ip6tables = 1 
net.ipv4.ip_forward                 = 1 
EOF

# Apply new settings
sudo sysctl --system

echo "[STEP 4] Installing containerd runtime"
sudo apt update -y
sudo apt install -y containerd apt-transport-https curl

# Generate default containerd config
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

# Restart and enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

echo "[STEP 5] Adding Kubernetes repository and installing kubeadm, kubelet, kubectl"
# Add Kubernetes signing key
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

# Add Kubernetes repo
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | \
sudo tee /etc/apt/sources.list.d/kubernetes.list

# Install components
sudo apt update -y
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# Enable kubelet service
sudo systemctl enable kubelet

###########################################
# STEP 2: MASTER NODE SETUP
###########################################

if [[ "$is_master" == "yes" ]]; then
  echo "[MASTER] Initializing Kubernetes master node with kubeadm"
  sudo kubeadm init --pod-network-cidr=192.168.0.0/16

  echo "[MASTER] Setting up kubectl (Kubernetes CLI) access for current user"
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

  echo "[MASTER] Installing Calico CNI plugin for networking"
  kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml

  echo
  echo "âœ… Master node setup complete!"
  echo "ðŸ”‘ Below is the command to join worker nodes:"
  kubeadm token create --print-join-command

###########################################
# STEP 3: WORKER NODE SETUP
###########################################

else
  echo "[WORKER] Please copy-paste the kubeadm join command shown on the master node:"
  read -p "Join command: " join_cmd

  echo "[WORKER] Running the join command to add this node to the cluster..."
  sudo $join_cmd

  echo "âœ… Worker node successfully joined the Kubernetes cluster."
fi
