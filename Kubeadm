#!/bin/bash
set -e

read -p "Is this the master node? (y/n): " is_master

echo '[Step 1] Disable Swap'
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

echo '[Step 2] Load kernel modules and configure sysctl'
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

echo '[Step 3] Install containerd'
curl -LO https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz
sudo tar Cxzvf /usr/local containerd-1.7.14-linux-amd64.tar.gz
curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
sudo mkdir -p /usr/local/lib/systemd/system/
sudo mv containerd.service /usr/local/lib/systemd/system/
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl daemon-reload
sudo systemctl enable --now containerd

echo '[Step 4] Install runc'
curl -LO https://github.com/opencontainers/runc/releases/download/v1.1.12/runc.amd64
sudo install -m 755 runc.amd64 /usr/local/sbin/runc

echo '[Step 5] Install CNI plugins'
curl -LO https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
sudo mkdir -p /opt/cni/bin
sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.5.0.tgz

echo '[Step 6] Install Kubernetes components'
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet=1.29.6-1.1 kubeadm=1.29.6-1.1 kubectl=1.29.6-1.1 --allow-downgrades --allow-change-held-packages
sudo apt-mark hold kubelet kubeadm kubectl

echo '[Step 7] Configure crictl'
sudo crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock

if [[ "$is_master" == "y" || "$is_master" == "Y" ]]; then
  echo '[Step 8] Initialize master node'
  read -p "Enter the private IP of this master node: " master_ip
  sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=$master_ip --node-name master

  echo '[Step 9] Configure kubectl for current user'
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

  echo '[Step 10] Install Calico CNI using Operator and CRs'
  kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
  curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml
  kubectl apply -f custom-resources.yaml

  echo '✅ Master node setup complete! Run the below command on worker nodes:'
  kubeadm token create --print-join-command
else
  echo 'ℹ️  When prompted, paste the kubeadm join command copied from the master node.'
  read -p "Paste the full kubeadm join command here: " join_cmd
  sudo $join_cmd
  echo "✅ Worker node successfully joined the cluster."
fi
